
# typetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BASE VAR QUANT COMMA TO OPEN CLOSE DOT OPENLIST CLOSELISTtype : mono\n            | polypoly : QUANT varlist DOT monovarlist : var\n               | var COMMA varlistmono : OPEN mono CLOSE\n            | base\n            | var\n            | constructorconstructor : function\n                   | list\n                   | pairfunction : mono TO monolist : OPENLIST mono CLOSELISTpair : mono COMMA monobase : BASEvar : VAR'
    
_lr_action_items = {'QUANT':([0,],[1,]),'CLOSE':([4,5,6,7,9,11,12,14,19,23,24,25,26,],[-16,-17,-7,-9,-8,-10,-12,-11,25,-13,-15,-6,-14,]),'COMMA':([2,4,5,6,7,9,11,12,14,15,19,20,23,24,25,26,28,],[18,-16,-17,-7,-9,-8,-10,-12,-11,21,18,18,18,18,-6,-14,18,]),'OPEN':([0,10,13,17,18,22,],[10,10,10,10,10,10,]),'DOT':([5,15,16,27,],[-17,-4,22,-5,]),'BASE':([0,10,13,17,18,22,],[4,4,4,4,4,4,]),'TO':([2,4,5,6,7,9,11,12,14,19,20,23,24,25,26,28,],[17,-16,-17,-7,-9,-8,-10,-12,-11,17,17,17,17,-6,-14,17,]),'CLOSELIST':([4,5,6,7,9,11,12,14,20,23,24,25,26,],[-16,-17,-7,-9,-8,-10,-12,-11,26,-13,-15,-6,-14,]),'$end':([2,3,4,5,6,7,8,9,11,12,14,23,24,25,26,28,],[-1,0,-16,-17,-7,-9,-2,-8,-10,-12,-11,-13,-15,-6,-14,-3,]),'VAR':([0,1,10,13,17,18,21,22,],[5,5,5,5,5,5,5,5,]),'OPENLIST':([0,10,13,17,18,22,],[13,13,13,13,13,13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'constructor':([0,10,13,17,18,22,],[7,7,7,7,7,7,]),'poly':([0,],[8,]),'mono':([0,10,13,17,18,22,],[2,19,20,23,24,28,]),'var':([0,1,10,13,17,18,21,22,],[9,15,9,9,9,9,15,9,]),'type':([0,],[3,]),'function':([0,10,13,17,18,22,],[11,11,11,11,11,11,]),'pair':([0,10,13,17,18,22,],[12,12,12,12,12,12,]),'list':([0,10,13,17,18,22,],[14,14,14,14,14,14,]),'varlist':([1,21,],[16,27,]),'base':([0,10,13,17,18,22,],[6,6,6,6,6,6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> type","S'",1,None,None,None),
  ('type -> mono','type',1,'p_type','typeparser.py',29),
  ('type -> poly','type',1,'p_type','typeparser.py',30),
  ('poly -> QUANT varlist DOT mono','poly',4,'p_poly','typeparser.py',34),
  ('varlist -> var','varlist',1,'p_varlist','typeparser.py',38),
  ('varlist -> var COMMA varlist','varlist',3,'p_varlist','typeparser.py',39),
  ('mono -> OPEN mono CLOSE','mono',3,'p_mono','typeparser.py',46),
  ('mono -> base','mono',1,'p_mono','typeparser.py',47),
  ('mono -> var','mono',1,'p_mono','typeparser.py',48),
  ('mono -> constructor','mono',1,'p_mono','typeparser.py',49),
  ('constructor -> function','constructor',1,'p_constructor','typeparser.py',56),
  ('constructor -> list','constructor',1,'p_constructor','typeparser.py',57),
  ('constructor -> pair','constructor',1,'p_constructor','typeparser.py',58),
  ('function -> mono TO mono','function',3,'p_function','typeparser.py',62),
  ('list -> OPENLIST mono CLOSELIST','list',3,'p_list','typeparser.py',66),
  ('pair -> mono COMMA mono','pair',3,'p_pair','typeparser.py',70),
  ('base -> BASE','base',1,'p_base','typeparser.py',74),
  ('var -> VAR','var',1,'p_var','typeparser.py',78),
]
